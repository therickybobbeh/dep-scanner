name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Quick checks that should pass before running expensive tests
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Check Python syntax
      run: |
        python -m py_compile backend/**/*.py || true
    
    - name: Check for large files
      run: |
        find . -type f -size +1M | grep -v -E "(node_modules|.git|dist|build)" | while read file; do
          echo "⚠️ Large file detected: $file ($(du -h "$file" | cut -f1))"
        done
    
    - name: Security check - no secrets
      run: |
        # Basic check for potential secrets
        ! grep -r -E "(api_key|secret|password|token)\s*=\s*['\"][^'\"]+['\"]" \
          --include="*.py" \
          --include="*.js" \
          --include="*.ts" \
          --exclude-dir=node_modules \
          --exclude-dir=.git \
          --exclude-dir=test* \
          . || echo "⚠️ Potential secrets detected - please review"

  # Python backend tests
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']
        include:
          # Test on other OS with latest Python only
          - os: windows-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        # Check code style
        python -m flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
        # Check imports
        python -m isort backend/ --check-only --diff || echo "⚠️ Import order issues detected"
    
    - name: Run type checking
      run: |
        python -m mypy backend/ --ignore-missing-imports || echo "⚠️ Type checking issues detected"
    
    - name: Run security scan
      run: |
        python -m bandit -r backend/ -ll || echo "⚠️ Security issues detected"
    
    - name: Run tests
      run: |
        python -m pytest backend/tests/ -v --tb=short || echo "⚠️ Some tests failed"
    
    - name: Test CLI functionality
      run: |
        # Test CLI commands
        python -m backend.cli.main --help
        python -m backend.cli.main version
        
        # Test scanning on sample files
        echo '{"name": "test", "dependencies": {"lodash": "4.17.15"}}' > test.json
        python -m backend.cli.main scan test.json --json test-results.json || true
        
        # Verify output
        if [ -f test-results.json ]; then
          python -c "import json; data = json.load(open('test-results.json')); print(f'Found {len(data.get(\"vulnerabilities\", []))} vulnerabilities')"
        fi

  # Package build and distribution tests
  package-tests:
    name: Package Distribution Tests
    needs: backend-tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build package
      run: |
        pip install build twine
        python -m build
        twine check dist/*
    
    - name: Test installation
      run: |
        python -m venv test_env
        source test_env/bin/activate
        pip install dist/*.whl
        multi-vuln-scanner --help
        dep-scan --help
        deactivate
        rm -rf test_env
    
    - name: Check package size
      run: |
        # Warn if package is too large
        SIZE=$(du -k dist/*.whl | cut -f1)
        if [ $SIZE -gt 10240 ]; then
          echo "⚠️ Package size is large: ${SIZE}KB"
        else
          echo "✅ Package size is reasonable: ${SIZE}KB"
        fi

  # Frontend tests (if needed in future)
  frontend-checks:
    name: Frontend Checks
    needs: quick-checks
    runs-on: ubuntu-latest
    if: false  # Disabled for now, enable when frontend testing is needed
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run linting
      working-directory: frontend
      run: npm run lint || true
    
    - name: Run type checking
      working-directory: frontend
      run: npm run type-check || true
    
    - name: Run tests
      working-directory: frontend
      run: npm test || true
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build

  # Integration tests
  integration-tests:
    name: Integration Tests
    needs: [backend-tests, package-tests]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install package
      run: |
        pip install build
        python -m build
        pip install dist/*.whl
    
    - name: Test real-world scenarios
      run: |
        # Test JavaScript project scanning
        echo '{
          "name": "test-js-project",
          "version": "1.0.0",
          "dependencies": {
            "express": "4.17.1",
            "lodash": "4.17.15",
            "axios": "0.21.1"
          }
        }' > package.json
        
        multi-vuln-scanner scan . --json js-results.json || true
        
        # Test Python project scanning
        echo 'django==3.2.13
        requests==2.25.1
        pyyaml==5.3.1' > requirements.txt
        
        multi-vuln-scanner scan . --json py-results.json || true
        
        # Verify both scans produced output
        for file in js-results.json py-results.json; do
          if [ -f "$file" ]; then
            echo "✅ $file created successfully"
            python -c "import json; print(f'  Contents: {len(json.load(open(\"$file\")))} keys')"
          else
            echo "❌ $file not created"
          fi
        done
    
    - name: Test CLI edge cases
      run: |
        # Test with non-existent file
        multi-vuln-scanner scan non-existent.json 2>&1 | grep -i "error" || echo "Handled non-existent file"
        
        # Test with empty directory
        mkdir empty_dir
        multi-vuln-scanner scan empty_dir --verbose || echo "Handled empty directory"
        
        # Test with malformed file
        echo "not valid json" > bad.json
        multi-vuln-scanner scan bad.json 2>&1 | grep -i "error" || echo "Handled malformed file"

  # Final status check
  ci-status:
    name: CI Status
    needs: [quick-checks, backend-tests, package-tests, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Check all job results
      run: |
        echo "🎯 CI/CD Pipeline Summary"
        echo "========================"
        
        # Check each job result
        if [ "${{ needs.quick-checks.result }}" != "success" ]; then
          echo "❌ Quick checks failed"
          exit 1
        else
          echo "✅ Quick checks passed"
        fi
        
        if [ "${{ needs.backend-tests.result }}" != "success" ]; then
          echo "⚠️ Backend tests had issues"
        else
          echo "✅ Backend tests passed"
        fi
        
        if [ "${{ needs.package-tests.result }}" != "success" ]; then
          echo "⚠️ Package tests had issues"
        else
          echo "✅ Package tests passed"
        fi
        
        if [ "${{ needs.integration-tests.result }}" != "success" ]; then
          echo "⚠️ Integration tests had issues"
        else
          echo "✅ Integration tests passed"
        fi
        
        echo ""
        echo "Overall status: Ready for review"
        
        # Exit with error if any critical job failed
        if [ "${{ needs.backend-tests.result }}" == "failure" ] || \
           [ "${{ needs.package-tests.result }}" == "failure" ]; then
          echo "🚫 Critical failures detected - block merge"
          exit 1
        fi