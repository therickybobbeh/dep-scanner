name: Test TestPyPI Package Installation

on:
  # Run after TestPyPI publish workflow
  workflow_run:
    workflows: ["Publish to TestPyPI"]
    types: [completed]
    
  # Manual trigger to test package installation
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version to test (leave empty for latest)'
        required: false
        default: ''
      use_pypi:
        description: 'Test from production PyPI (future use - currently TestPyPI only)'
        required: false
        default: 'false'
        type: boolean

jobs:
  test-installation:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install package from TestPyPI (Default)
      if: ${{ !inputs.use_pypi }}
      run: |
        python -m pip install --upgrade pip
        if [ -n "${{ inputs.package_version }}" ]; then
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ multi-vuln-scanner==${{ inputs.package_version }}
        else
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ multi-vuln-scanner
        fi
      shell: bash
    
    - name: Install package from PyPI (Future Use)
      if: ${{ inputs.use_pypi }}
      run: |
        python -m pip install --upgrade pip
        if [ -n "${{ inputs.package_version }}" ]; then
          pip install multi-vuln-scanner==${{ inputs.package_version }}
        else
          pip install multi-vuln-scanner
        fi
      shell: bash
    
    - name: Test basic CLI functionality
      run: |
        # Test help command
        multi-vuln-scanner --help
        
        # Test version command
        multi-vuln-scanner version
        
        # Test backward compatibility
        dep-scan --help
        dep-scan version
        
        echo "‚úÖ Basic CLI commands work"
      shell: bash
    
    - name: Test scanning functionality
      run: |
        # Create test files for different ecosystems
        
        # Test JavaScript scanning
        echo '{"name": "test-js", "version": "1.0.0", "dependencies": {"lodash": "4.17.15", "axios": "0.21.1"}}' > package.json
        multi-vuln-scanner package.json --json js-results.json
        echo "JavaScript scan completed"
        
        # Test Python scanning
        echo -e "requests==2.25.1\ndjango==3.2.13" > requirements.txt
        multi-vuln-scanner requirements.txt --json python-results.json
        echo "Python scan completed"
        
        # Verify results
        python -c "
import json
import sys

# Check JavaScript results
with open('js-results.json') as f:
    js_data = json.load(f)
    js_vulns = len(js_data.get('vulnerabilities', []))
    print(f'JavaScript scan found {js_vulns} vulnerabilities')
    if js_vulns == 0:
        print('‚ö†Ô∏è  Expected vulnerabilities in lodash 4.17.15 and axios 0.21.1')

# Check Python results  
with open('python-results.json') as f:
    py_data = json.load(f)
    py_vulns = len(py_data.get('vulnerabilities', []))
    print(f'Python scan found {py_vulns} vulnerabilities')
    if py_vulns == 0:
        print('‚ö†Ô∏è  Expected vulnerabilities in old Django and requests versions')

print('‚úÖ Scanning functionality works')
"
      shell: bash
    
    - name: Test advanced CLI features
      run: |
        # Test with different options
        multi-vuln-scanner package.json --no-include-dev --verbose
        multi-vuln-scanner requirements.txt --ignore-severity LOW
        
        # Test directory scanning
        mkdir test-project
        cp package.json test-project/
        cp requirements.txt test-project/
        multi-vuln-scanner test-project --json directory-results.json
        
        echo "‚úÖ Advanced CLI features work"
      shell: bash
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          *.json
        retention-days: 3

  report-results:
    name: Report Test Results
    needs: test-installation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Package installation and testing completed across all platforms"
        echo "Check individual job results for any failures"
        
        if [ "${{ needs.test-installation.result }}" == "success" ]; then
          echo "üéâ All tests passed! Package works correctly on all platforms"
        else
          echo "‚ùå Some tests failed. Check the logs above for details"
          exit 1
        fi