name: Test Package Build

on:
  push:
    branches: [ main, develop, master ]
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'MANIFEST.in'
      - '.github/workflows/test-package.yml'
  pull_request:
    branches: [ main, develop, master ]
    paths:
      - 'backend/**'
      - 'pyproject.toml'
      - 'MANIFEST.in'
      - '.github/workflows/test-package.yml'

jobs:
  test-package:
    name: Test Package Build and Installation
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build package
      run: |
        python -m build
        echo "Package built successfully"
        ls -la dist/ || dir dist\
    
    - name: Check package with twine
      run: |
        twine check dist/*
    
    - name: Test wheel installation
      run: |
        # Create a virtual environment for testing
        python -m venv test_env
        
        # Activate and install
        if [ "$RUNNER_OS" == "Windows" ]; then
          test_env\\Scripts\\activate && pip install dist/*.whl
        else
          source test_env/bin/activate && pip install dist/*.whl
        fi
      shell: bash
    
    - name: Test CLI commands
      run: |
        # Test main command
        if [ "$RUNNER_OS" == "Windows" ]; then
          test_env\\Scripts\\multi-vuln-scanner --help
          test_env\\Scripts\\multi-vuln-scanner version
          test_env\\Scripts\\dep-scan --help
        else
          test_env/bin/multi-vuln-scanner --help
          test_env/bin/multi-vuln-scanner version
          test_env/bin/dep-scan --help
        fi
      shell: bash
    
    - name: Test basic scanning
      run: |
        # Create test file
        echo '{"name": "test", "version": "1.0.0", "dependencies": {"lodash": "4.17.15"}}' > test-package.json
        
        # Run scan
        if [ "$RUNNER_OS" == "Windows" ]; then
          test_env\\Scripts\\multi-vuln-scanner scan . --verbose || echo "Scan completed with findings"
        else
          test_env/bin/multi-vuln-scanner scan . --verbose || echo "Scan completed with findings"
        fi
      shell: bash
    
    - name: Verify package metadata
      run: |
        python -c "
import json
import zipfile
from pathlib import Path

# Find wheel file
wheel_files = list(Path('dist').glob('*.whl'))
if not wheel_files:
    print('‚ùå No wheel file found')
    exit(1)

wheel_file = wheel_files[0]
print(f'üì¶ Checking wheel: {wheel_file}')

# Check wheel contents
with zipfile.ZipFile(wheel_file, 'r') as zip_file:
    files = zip_file.namelist()
    print(f'‚úÖ Wheel contains {len(files)} files')
    
    # Check for required components
    has_cli = any('cli/main.py' in f for f in files)
    has_scanner = any('scanner/osv.py' in f for f in files)
    has_entry_points = any('entry_points.txt' in f for f in files)
    
    if not all([has_cli, has_scanner, has_entry_points]):
        print('‚ùå Missing required components')
        exit(1)
    
    print('‚úÖ All required components present')
"
    
    - name: Cleanup
      if: always()
      run: |
        # Clean up test environment
        if [ "$RUNNER_OS" == "Windows" ]; then
          rmdir /s /q test_env 2>nul || true
        else
          rm -rf test_env
        fi
        rm -f test-package.json
      shell: bash
    
    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failed-build-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/
          *.log
        retention-days: 7

  test-publish-dry-run:
    name: Test Publishing (Dry Run)
    needs: test-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check if version exists on TestPyPI
      run: |
        # Extract version from pyproject.toml
        VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Package version: $VERSION"
        
        # Check if version already exists (will fail gracefully if not)
        pip index versions multi-vuln-scanner --index-url https://test.pypi.org/simple/ 2>/dev/null | grep -q "$VERSION" && \
          echo "‚ö†Ô∏è Version $VERSION already exists on TestPyPI" || \
          echo "‚úÖ Version $VERSION is available for publishing"
    
    - name: Dry run upload check
      run: |
        echo "üì¶ Would upload the following to TestPyPI:"
        ls -lh dist/
        echo ""
        echo "To actually publish:"
        echo "1. Ensure you have TestPyPI credentials configured"
        echo "2. Run: make -f Makefile.publish publish-test"
        echo "Or trigger the pypi-publish.yml workflow manually"

  summary:
    name: Test Summary
    needs: [test-package, test-publish-dry-run]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Check results
      run: |
        echo "üìä Package Test Summary"
        echo "======================="
        
        if [ "${{ needs.test-package.result }}" == "success" ]; then
          echo "‚úÖ Package builds and installs on all platforms"
        else
          echo "‚ùå Package build/install failed on some platforms"
        fi
        
        if [ "${{ needs.test-publish-dry-run.result }}" == "success" ] || [ "${{ needs.test-publish-dry-run.result }}" == "skipped" ]; then
          echo "‚úÖ Package ready for TestPyPI publishing"
        else
          echo "‚ö†Ô∏è Publishing dry run encountered issues"
        fi
        
        echo ""
        echo "Next steps:"
        echo "- Review any warnings or errors above"
        echo "- If all green, package is ready for TestPyPI"
        echo "- Use 'make publish-test' locally or trigger pypi-publish.yml workflow"