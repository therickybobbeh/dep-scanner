# Multi-stage Docker build for DepScan Staging
FROM node:18-bullseye-slim AS frontend-builder

# Build frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./

# Install dependencies and build
RUN npm ci --only=production --no-audit --no-fund
COPY frontend/ ./
RUN npm run build

# Python backend stage
FROM python:3.12-slim AS backend

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/app/backend

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libc6-dev \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r app && useradd -r -g app app

# Create directories
RUN mkdir -p /app/backend /app/frontend/dist /app/data /app/logs
WORKDIR /app

# Copy and install Python dependencies
COPY backend/requirements.txt backend/
RUN pip install -r backend/requirements.txt

# Copy application code
COPY backend/ backend/
COPY --from=frontend-builder /app/frontend/dist/ frontend/dist/

# Set proper permissions
RUN chown -R app:app /app && \
    mkdir -p /home/app/.cache/pip && \
    chown -R app:app /home/app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Use gunicorn for staging
CMD ["python", "-m", "gunicorn", "-w", "2", "-k", "uvicorn.workers.UvicornWorker", \
     "--bind", "0.0.0.0:8000", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info", \
     "backend.web.main:app"]