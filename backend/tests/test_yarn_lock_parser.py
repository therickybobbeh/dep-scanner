"""Tests for YarnLockParser functionality"""
import pytest
from unittest.mock import AsyncMock, patch

from backend.core.resolver.parsers.javascript.yarn_lock import YarnLockParser
from backend.core.resolver.base import ParseError
from backend.core.models import Dep


class TestYarnLockParser:
    """Test cases for YarnLockParser"""
    
    @pytest.fixture
    def parser(self):
        """Create YarnLockParser instance for testing"""
        return YarnLockParser()
    
    @pytest.mark.asyncio
    async def test_parse_valid_yarn_lock(self, parser, sample_yarn_lock):
        """Test parsing a valid yarn.lock file"""
        dependencies = await parser.parse(sample_yarn_lock)
        
        # Should parse exactly 7 dependencies from our test file
        assert len(dependencies) == 7
        
        # Check that all dependencies are properly parsed
        dep_names = [dep.name for dep in dependencies]
        expected_names = [
            "@babel/code-frame",
            "@babel/highlight", 
            "@babel/helper-validator-identifier",
            "chalk",
            "ansi-styles",
            "js-tokens",
            "lodash"
        ]
        
        for expected_name in expected_names:
            assert expected_name in dep_names, f"Missing dependency: {expected_name}"
    
    @pytest.mark.asyncio
    async def test_parse_yarn_lock_with_correct_versions(self, parser, sample_yarn_lock):
        """Test that versions are parsed correctly"""
        dependencies = await parser.parse(sample_yarn_lock)
        
        # Create a map of name -> version for easier testing
        dep_versions = {dep.name: dep.version for dep in dependencies}
        
        expected_versions = {
            "@babel/code-frame": "7.22.13",
            "@babel/highlight": "7.22.20",
            "@babel/helper-validator-identifier": "7.22.20", 
            "chalk": "2.4.2",
            "ansi-styles": "3.2.1",
            "js-tokens": "4.0.0",
            "lodash": "4.17.21"
        }
        
        for name, expected_version in expected_versions.items():
            assert dep_versions[name] == expected_version, f"Wrong version for {name}: got {dep_versions[name]}, expected {expected_version}"
    
    @pytest.mark.asyncio
    async def test_parse_yarn_lock_dependency_properties(self, parser, sample_yarn_lock):
        """Test that dependency properties are set correctly"""
        dependencies = await parser.parse(sample_yarn_lock)
        
        for dep in dependencies:
            # All yarn.lock dependencies should be marked as direct
            # since yarn.lock doesn't distinguish clearly
            assert dep.is_direct is True
            
            # Dev status should be False since we don't have package.json context
            assert dep.is_dev is False
            
            # Ecosystem should be npm
            assert dep.ecosystem == "npm"
            
            # Path should contain the package name
            assert dep.name in dep.path
    
    @pytest.mark.asyncio 
    async def test_parse_empty_yarn_lock(self, parser):
        """Test parsing an empty yarn.lock file"""
        empty_content = "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n"
        
        dependencies = await parser.parse(empty_content)
        assert len(dependencies) == 0
    
    @pytest.mark.asyncio
    async def test_parse_comments_only_yarn_lock(self, parser):
        """Test parsing a yarn.lock file with only comments"""
        comments_only = """# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

# This is a comment
# Another comment
"""
        
        dependencies = await parser.parse(comments_only)
        assert len(dependencies) == 0
    
    @pytest.mark.asyncio
    async def test_parse_malformed_yarn_lock_handles_gracefully(self, parser):
        """Test that malformed yarn.lock content is handled gracefully"""
        malformed_content = """
not-a-valid-package-entry
    version "1.0.0"
    but this is not properly formatted
"""
        
        # The parser should handle malformed content gracefully by skipping invalid entries
        # rather than raising an error, returning empty list
        dependencies = await parser.parse(malformed_content)
        assert len(dependencies) == 0
    
    @pytest.mark.asyncio
    async def test_parse_yarn_lock_with_scoped_packages(self, parser):
        """Test parsing scoped packages like @babel/core"""
        scoped_content = '''# yarn lockfile v1

"@babel/core@^7.22.0":
  version "7.22.5"
  resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.22.5.tgz"
  integrity sha512-SBuTAjg91A3eKOvD62tr+rQDfkGODl5ITBOkcrJ6Rlah1ER7pCKxLPCBN4v9yGJNq9B9XBChv+6Kf7mGjhgL0A==

"regular-package@^1.0.0":
  version "1.0.5"
  resolved "https://registry.yarnpkg.com/regular-package/-/regular-package-1.0.5.tgz"
  integrity sha512-abc123==
'''
        
        dependencies = await parser.parse(scoped_content)
        assert len(dependencies) == 2
        
        dep_names = [dep.name for dep in dependencies]
        assert "@babel/core" in dep_names
        assert "regular-package" in dep_names
        
        # Check versions
        babel_dep = next(dep for dep in dependencies if dep.name == "@babel/core")
        regular_dep = next(dep for dep in dependencies if dep.name == "regular-package")
        
        assert babel_dep.version == "7.22.5"
        assert regular_dep.version == "1.0.5"
    
    def test_supported_formats(self, parser):
        """Test that parser reports correct supported formats"""
        formats = parser.supported_formats
        assert "yarn.lock" in formats
        assert len(formats) == 1
    
    def test_parser_ecosystem(self, parser):
        """Test that parser has correct ecosystem"""
        assert parser.ecosystem == "npm"
    
    @pytest.mark.asyncio
    async def test_extract_name_version_from_yarn_entry(self, parser):
        """Test internal method for extracting name and version"""
        # Test regular package
        entry = {
            "package_spec": "lodash@^4.17.21, lodash@~4.17.20",
            "version": "4.17.21"
        }
        name, version = parser._extract_name_version_from_yarn_entry(entry)
        assert name == "lodash"
        assert version == "4.17.21"
        
        # Test scoped package
        scoped_entry = {
            "package_spec": "@babel/core@^7.22.0",
            "version": "7.22.5"
        }
        name, version = parser._extract_name_version_from_yarn_entry(scoped_entry)
        assert name == "@babel/core"
        assert version == "7.22.5"
        
        # Test missing data
        empty_entry = {}
        name, version = parser._extract_name_version_from_yarn_entry(empty_entry)
        assert name == ""
        assert version == ""
    
    @pytest.mark.asyncio
    async def test_parse_yarn_entries_parsing(self, parser):
        """Test internal method for parsing yarn entries"""
        content = '''# yarn lockfile v1

"lodash@^4.17.21":
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz"
  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==

"@babel/highlight@^7.22.13":
  version "7.22.20"
  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.22.20.tgz"
  integrity sha512-dkdMCN3py0+ksCgYmGG8jKeGA/8Tk+gJwSYYlFGxG5lmhfKNoAy004YpLxpS1W2J8m/EK2Ew+yOs9pVRwO89mg==
'''
        
        entries = parser._parse_yarn_entries(content)
        assert len(entries) == 2
        
        # Check first entry
        assert entries[0]['package_spec'] == "lodash@^4.17.21"
        assert entries[0]['version'] == "4.17.21"
        # The URL parsing splits on first colon, so check for the resolved key with URL prefix
        resolved_keys = [k for k in entries[0].keys() if k.startswith('resolved')]
        assert len(resolved_keys) > 0, f"No resolved key found. Available keys: {list(entries[0].keys())}"
        assert 'integrity' in entries[0]
        
        # Check second entry  
        assert entries[1]['package_spec'] == "@babel/highlight@^7.22.13"
        assert entries[1]['version'] == "7.22.20"